2022-06-10 20:01:16:800 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Cool (RULES (RULE prog (BLOCK (ALT (+ (BLOCK (ALT class ';')))))) (RULE class (BLOCK (ALT 'class' TYPE (? (BLOCK (ALT 'inherits' TYPE))) '{' (* (BLOCK (ALT feature ';'))) '}'))) (RULE feature (BLOCK (ALT ID '(' (? (BLOCK (ALT formal (* (BLOCK (ALT ',' formal)))))) ')' ':' TYPE '{' expr '}') (ALT ID ':' TYPE (? (BLOCK (ALT '<-' expr)))))) (RULE formal (BLOCK (ALT ID ':' TYPE))) (RULE expr (BLOCK (ALT ID '<-' expr) (ALT expr (? (BLOCK (ALT '@' TYPE))) '.' ID '(' (? (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) ')') (ALT ID '(' (? (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) ')') (ALT 'if' expr 'then' expr 'else' expr 'fi') (ALT 'while' expr 'loop' expr 'pool') (ALT '{' (+ (BLOCK (ALT expr ';'))) '}') (ALT 'let' ID ':' TYPE (? (BLOCK (ALT '<-' expr))) (* (BLOCK (ALT ',' ID ':' TYPE (? (BLOCK (ALT '<-' expr)))))) 'in' expr) (ALT 'case' expr 'of' (+ (BLOCK (ALT ID ':' TYPE '=>' expr))) 'esac') (ALT 'new' TYPE) (ALT 'isvoid' expr) (ALT expr '+' expr) (ALT expr '-' expr) (ALT expr '*' expr) (ALT expr '/' expr) (ALT '~' expr) (ALT expr '<' expr) (ALT expr '<=' expr) (ALT expr '=' expr) (ALT 'not' expr) (ALT '(' expr ')') (ALT ID) (ALT INTEGER) (ALT STRING) (ALT 'true') (ALT 'false'))) (RULE ID (BLOCK (ALT (BLOCK (ALT (.. 'a' 'z'))) (* (BLOCK (ALT (.. 'a' 'z')) (ALT (.. 'A' 'Z')) (ALT '_') (ALT (.. '0' '9'))))))) (RULE TYPE (BLOCK (ALT (BLOCK (ALT (.. 'A' 'Z'))) (* (BLOCK (ALT (.. 'a' 'z')) (ALT (.. 'A' 'Z')) (ALT '_') (ALT (.. '0' '9'))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT ESC) (ALT .))) '"'))) (RULE INTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\b\t\n\f])))) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) '\n') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE ESC (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [btnr"\\])))))
2022-06-10 20:01:16:810 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Cool (RULES (RULE prog (BLOCK (ALT (+ (BLOCK (ALT class ';')))))) (RULE class (BLOCK (ALT 'class' TYPE (? (BLOCK (ALT 'inherits' TYPE))) '{' (* (BLOCK (ALT feature ';'))) '}'))) (RULE feature (BLOCK (ALT ID '(' (? (BLOCK (ALT formal (* (BLOCK (ALT ',' formal)))))) ')' ':' TYPE '{' expr '}') (ALT ID ':' TYPE (? (BLOCK (ALT '<-' expr)))))) (RULE formal (BLOCK (ALT ID ':' TYPE))) (RULE expr (BLOCK (ALT ID '<-' expr) (ALT expr (? (BLOCK (ALT '@' TYPE))) '.' ID '(' (? (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) ')') (ALT ID '(' (? (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) ')') (ALT 'if' expr 'then' expr 'else' expr 'fi') (ALT 'while' expr 'loop' expr 'pool') (ALT '{' (+ (BLOCK (ALT expr ';'))) '}') (ALT 'let' ID ':' TYPE (? (BLOCK (ALT '<-' expr))) (* (BLOCK (ALT ',' ID ':' TYPE (? (BLOCK (ALT '<-' expr)))))) 'in' expr) (ALT 'case' expr 'of' (+ (BLOCK (ALT ID ':' TYPE '=>' expr))) 'esac') (ALT 'new' TYPE) (ALT 'isvoid' expr) (ALT expr '+' expr) (ALT expr '-' expr) (ALT expr '*' expr) (ALT expr '/' expr) (ALT '~' expr) (ALT expr '<' expr) (ALT expr '<=' expr) (ALT expr '=' expr) (ALT 'not' expr) (ALT '(' expr ')') (ALT ID) (ALT INTEGER) (ALT STRING) (ALT 'true') (ALT 'false'))) (RULE ID (BLOCK (ALT (BLOCK (ALT (.. 'a' 'z'))) (* (BLOCK (ALT (SET (.. 'a' 'z') (.. 'A' 'Z') '_' (.. '0' '9')))))))) (RULE TYPE (BLOCK (ALT (BLOCK (ALT (.. 'A' 'Z'))) (* (BLOCK (ALT (SET (.. 'a' 'z') (.. 'A' 'Z') '_' (.. '0' '9')))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT ESC) (ALT .))) '"'))) (RULE INTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\b\t\n\f])))) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) '\n') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE ESC (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [btnr"\\])))))
2022-06-10 20:01:16:825 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Cool (RULES (RULE prog (BLOCK (ALT (+ (BLOCK (ALT class ';')))))) (RULE class (BLOCK (ALT 'class' TYPE (? (BLOCK (ALT 'inherits' TYPE))) '{' (* (BLOCK (ALT feature ';'))) '}'))) (RULE feature (BLOCK (ALT ID '(' (? (BLOCK (ALT formal (* (BLOCK (ALT ',' formal)))))) ')' ':' TYPE '{' expr '}') (ALT ID ':' TYPE (? (BLOCK (ALT '<-' expr)))))) (RULE formal (BLOCK (ALT ID ':' TYPE))) (RULE expr (BLOCK (ALT ID '<-' expr) (ALT expr (? (BLOCK (ALT '@' TYPE))) '.' ID '(' (? (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) ')') (ALT ID '(' (? (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) ')') (ALT 'if' expr 'then' expr 'else' expr 'fi') (ALT 'while' expr 'loop' expr 'pool') (ALT '{' (+ (BLOCK (ALT expr ';'))) '}') (ALT 'let' ID ':' TYPE (? (BLOCK (ALT '<-' expr))) (* (BLOCK (ALT ',' ID ':' TYPE (? (BLOCK (ALT '<-' expr)))))) 'in' expr) (ALT 'case' expr 'of' (+ (BLOCK (ALT ID ':' TYPE '=>' expr))) 'esac') (ALT 'new' TYPE) (ALT 'isvoid' expr) (ALT expr '+' expr) (ALT expr '-' expr) (ALT expr '*' expr) (ALT expr '/' expr) (ALT '~' expr) (ALT expr '<' expr) (ALT expr '<=' expr) (ALT expr '=' expr) (ALT 'not' expr) (ALT '(' expr ')') (ALT ID) (ALT INTEGER) (ALT STRING) (ALT 'true') (ALT 'false')))))
2022-06-10 20:01:16:825 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CoolLexer (RULES (RULE T__0 (BLOCK (ALT ';'))) (RULE T__1 (BLOCK (ALT 'class'))) (RULE T__2 (BLOCK (ALT 'inherits'))) (RULE T__3 (BLOCK (ALT '{'))) (RULE T__4 (BLOCK (ALT '}'))) (RULE T__5 (BLOCK (ALT '('))) (RULE T__6 (BLOCK (ALT ','))) (RULE T__7 (BLOCK (ALT ')'))) (RULE T__8 (BLOCK (ALT ':'))) (RULE T__9 (BLOCK (ALT '<-'))) (RULE T__10 (BLOCK (ALT '@'))) (RULE T__11 (BLOCK (ALT '.'))) (RULE T__12 (BLOCK (ALT 'if'))) (RULE T__13 (BLOCK (ALT 'then'))) (RULE T__14 (BLOCK (ALT 'else'))) (RULE T__15 (BLOCK (ALT 'fi'))) (RULE T__16 (BLOCK (ALT 'while'))) (RULE T__17 (BLOCK (ALT 'loop'))) (RULE T__18 (BLOCK (ALT 'pool'))) (RULE T__19 (BLOCK (ALT 'let'))) (RULE T__20 (BLOCK (ALT 'in'))) (RULE T__21 (BLOCK (ALT 'case'))) (RULE T__22 (BLOCK (ALT 'of'))) (RULE T__23 (BLOCK (ALT '=>'))) (RULE T__24 (BLOCK (ALT 'esac'))) (RULE T__25 (BLOCK (ALT 'new'))) (RULE T__26 (BLOCK (ALT 'isvoid'))) (RULE T__27 (BLOCK (ALT '+'))) (RULE T__28 (BLOCK (ALT '-'))) (RULE T__29 (BLOCK (ALT '*'))) (RULE T__30 (BLOCK (ALT '/'))) (RULE T__31 (BLOCK (ALT '~'))) (RULE T__32 (BLOCK (ALT '<'))) (RULE T__33 (BLOCK (ALT '<='))) (RULE T__34 (BLOCK (ALT '='))) (RULE T__35 (BLOCK (ALT 'not'))) (RULE T__36 (BLOCK (ALT 'true'))) (RULE T__37 (BLOCK (ALT 'false'))) (RULE ID (BLOCK (ALT (BLOCK (ALT (.. 'a' 'z'))) (* (BLOCK (ALT (SET (.. 'a' 'z') (.. 'A' 'Z') '_' (.. '0' '9')))))))) (RULE TYPE (BLOCK (ALT (BLOCK (ALT (.. 'A' 'Z'))) (* (BLOCK (ALT (SET (.. 'a' 'z') (.. 'A' 'Z') '_' (.. '0' '9')))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT ESC) (ALT .))) '"'))) (RULE INTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\b\t\n\f])))) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) '\n') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE ESC (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [btnr"\\])))))
2022-06-10 20:01:16:997 left-recursion LogManager.java:25 expr
    :   ( {} ID<tokenIndex=106> '<-'<tokenIndex=108> expr<tokenIndex=110,p=25> 
        | ID<tokenIndex=138> '('<tokenIndex=140>(expr<tokenIndex=142> (','<tokenIndex=145> expr<tokenIndex=147>)*)?')'<tokenIndex=152> 
        | 'if'<tokenIndex=156> expr<tokenIndex=158> 'then'<tokenIndex=160> expr<tokenIndex=162> 'else'<tokenIndex=164> expr<tokenIndex=166> 'fi'<tokenIndex=168> 
        | 'while'<tokenIndex=172> expr<tokenIndex=174> 'loop'<tokenIndex=176> expr<tokenIndex=178> 'pool'<tokenIndex=180> 
        | '{'<tokenIndex=184>(expr<tokenIndex=186> ';'<tokenIndex=188>)+'}'<tokenIndex=191> 
        | 'let'<tokenIndex=195> ID<tokenIndex=197> ':'<tokenIndex=199> TYPE<tokenIndex=201> ('<-'<tokenIndex=204> expr<tokenIndex=206>)? (','<tokenIndex=211> ID<tokenIndex=213> ':'<tokenIndex=215> TYPE<tokenIndex=217> ('<-'<tokenIndex=220> expr<tokenIndex=222>)?)* 'in'<tokenIndex=228> expr<tokenIndex=230,p=19> 
        | 'case'<tokenIndex=234> expr<tokenIndex=236> 'of'<tokenIndex=238> (ID<tokenIndex=241> ':'<tokenIndex=243> TYPE<tokenIndex=245> '=>'<tokenIndex=247> expr<tokenIndex=249>)+ 'esac'<tokenIndex=253> 
        | 'new'<tokenIndex=257> TYPE<tokenIndex=259> 
        | 'isvoid'<tokenIndex=263> expr<tokenIndex=265,p=16> 
        | '~'<tokenIndex=301>expr<tokenIndex=302,p=11> 
        | 'not'<tokenIndex=330> expr<tokenIndex=332,p=7> 
        | '('<tokenIndex=336>expr<tokenIndex=337>')'<tokenIndex=338> 
        | ID<tokenIndex=342> 
        | INTEGER<tokenIndex=346> 
        | STRING<tokenIndex=350> 
        | 'true'<tokenIndex=354> 
        | 'false'<tokenIndex=358> 
        )
        (
          {self.precpred(self._ctx, 15)}?<p=15> '+'<tokenIndex=271> expr<tokenIndex=273,p=16>
                  | {self.precpred(self._ctx, 14)}?<p=14> '-'<tokenIndex=279> expr<tokenIndex=281,p=15>
                  | {self.precpred(self._ctx, 13)}?<p=13> '*'<tokenIndex=287> expr<tokenIndex=289,p=14>
                  | {self.precpred(self._ctx, 12)}?<p=12> '/'<tokenIndex=295> expr<tokenIndex=297,p=13>
                  | {self.precpred(self._ctx, 10)}?<p=10> '<'<tokenIndex=308> expr<tokenIndex=310,p=11>
                  | {self.precpred(self._ctx, 9)}?<p=9> '<='<tokenIndex=316> expr<tokenIndex=318,p=10>
                  | {self.precpred(self._ctx, 8)}?<p=8> '='<tokenIndex=324> expr<tokenIndex=326,p=9>
                  | {self.precpred(self._ctx, 24)}?<p=24> ('@'<tokenIndex=117>TYPE<tokenIndex=118>)?'.'<tokenIndex=121>ID<tokenIndex=122>'('<tokenIndex=123>(expr<tokenIndex=125> (','<tokenIndex=128>expr<tokenIndex=129>)*)?')'<tokenIndex=134>
        )*
    ;
2022-06-10 20:01:17:010 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 106))) ('<-' (ELEMENT_OPTIONS (= tokenIndex 108))) (expr (ELEMENT_OPTIONS (= tokenIndex 110) (= p 25)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 138))) ('(' (ELEMENT_OPTIONS (= tokenIndex 140))) (? (BLOCK (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 142))) (* (BLOCK (ALT (',' (ELEMENT_OPTIONS (= tokenIndex 145))) (expr (ELEMENT_OPTIONS (= tokenIndex 147))))))))) (')' (ELEMENT_OPTIONS (= tokenIndex 152)))) (ALT ('if' (ELEMENT_OPTIONS (= tokenIndex 156))) (expr (ELEMENT_OPTIONS (= tokenIndex 158))) ('then' (ELEMENT_OPTIONS (= tokenIndex 160))) (expr (ELEMENT_OPTIONS (= tokenIndex 162))) ('else' (ELEMENT_OPTIONS (= tokenIndex 164))) (expr (ELEMENT_OPTIONS (= tokenIndex 166))) ('fi' (ELEMENT_OPTIONS (= tokenIndex 168)))) (ALT ('while' (ELEMENT_OPTIONS (= tokenIndex 172))) (expr (ELEMENT_OPTIONS (= tokenIndex 174))) ('loop' (ELEMENT_OPTIONS (= tokenIndex 176))) (expr (ELEMENT_OPTIONS (= tokenIndex 178))) ('pool' (ELEMENT_OPTIONS (= tokenIndex 180)))) (ALT ('{' (ELEMENT_OPTIONS (= tokenIndex 184))) (+ (BLOCK (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 186))) (';' (ELEMENT_OPTIONS (= tokenIndex 188)))))) ('}' (ELEMENT_OPTIONS (= tokenIndex 191)))) (ALT ('let' (ELEMENT_OPTIONS (= tokenIndex 195))) (ID (ELEMENT_OPTIONS (= tokenIndex 197))) (':' (ELEMENT_OPTIONS (= tokenIndex 199))) (TYPE (ELEMENT_OPTIONS (= tokenIndex 201))) (? (BLOCK (ALT ('<-' (ELEMENT_OPTIONS (= tokenIndex 204))) (expr (ELEMENT_OPTIONS (= tokenIndex 206)))))) (* (BLOCK (ALT (',' (ELEMENT_OPTIONS (= tokenIndex 211))) (ID (ELEMENT_OPTIONS (= tokenIndex 213))) (':' (ELEMENT_OPTIONS (= tokenIndex 215))) (TYPE (ELEMENT_OPTIONS (= tokenIndex 217))) (? (BLOCK (ALT ('<-' (ELEMENT_OPTIONS (= tokenIndex 220))) (expr (ELEMENT_OPTIONS (= tokenIndex 222))))))))) ('in' (ELEMENT_OPTIONS (= tokenIndex 228))) (expr (ELEMENT_OPTIONS (= tokenIndex 230) (= p 19)))) (ALT ('case' (ELEMENT_OPTIONS (= tokenIndex 234))) (expr (ELEMENT_OPTIONS (= tokenIndex 236))) ('of' (ELEMENT_OPTIONS (= tokenIndex 238))) (+ (BLOCK (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 241))) (':' (ELEMENT_OPTIONS (= tokenIndex 243))) (TYPE (ELEMENT_OPTIONS (= tokenIndex 245))) ('=>' (ELEMENT_OPTIONS (= tokenIndex 247))) (expr (ELEMENT_OPTIONS (= tokenIndex 249)))))) ('esac' (ELEMENT_OPTIONS (= tokenIndex 253)))) (ALT ('new' (ELEMENT_OPTIONS (= tokenIndex 257))) (TYPE (ELEMENT_OPTIONS (= tokenIndex 259)))) (ALT ('isvoid' (ELEMENT_OPTIONS (= tokenIndex 263))) (expr (ELEMENT_OPTIONS (= tokenIndex 265) (= p 16)))) (ALT ('~' (ELEMENT_OPTIONS (= tokenIndex 301))) (expr (ELEMENT_OPTIONS (= tokenIndex 302) (= p 11)))) (ALT ('not' (ELEMENT_OPTIONS (= tokenIndex 330))) (expr (ELEMENT_OPTIONS (= tokenIndex 332) (= p 7)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 336))) (expr (ELEMENT_OPTIONS (= tokenIndex 337))) (')' (ELEMENT_OPTIONS (= tokenIndex 338)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 342)))) (ALT (INTEGER (ELEMENT_OPTIONS (= tokenIndex 346)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 350)))) (ALT ('true' (ELEMENT_OPTIONS (= tokenIndex 354)))) (ALT ('false' (ELEMENT_OPTIONS (= tokenIndex 358))))) (* (BLOCK (ALT ({self.precpred(self._ctx, 15)}? (ELEMENT_OPTIONS (= p 15))) ('+' (ELEMENT_OPTIONS (= tokenIndex 271))) (expr (ELEMENT_OPTIONS (= tokenIndex 273) (= p 16)))) (ALT ({self.precpred(self._ctx, 14)}? (ELEMENT_OPTIONS (= p 14))) ('-' (ELEMENT_OPTIONS (= tokenIndex 279))) (expr (ELEMENT_OPTIONS (= tokenIndex 281) (= p 15)))) (ALT ({self.precpred(self._ctx, 13)}? (ELEMENT_OPTIONS (= p 13))) ('*' (ELEMENT_OPTIONS (= tokenIndex 287))) (expr (ELEMENT_OPTIONS (= tokenIndex 289) (= p 14)))) (ALT ({self.precpred(self._ctx, 12)}? (ELEMENT_OPTIONS (= p 12))) ('/' (ELEMENT_OPTIONS (= tokenIndex 295))) (expr (ELEMENT_OPTIONS (= tokenIndex 297) (= p 13)))) (ALT ({self.precpred(self._ctx, 10)}? (ELEMENT_OPTIONS (= p 10))) ('<' (ELEMENT_OPTIONS (= tokenIndex 308))) (expr (ELEMENT_OPTIONS (= tokenIndex 310) (= p 11)))) (ALT ({self.precpred(self._ctx, 9)}? (ELEMENT_OPTIONS (= p 9))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 316))) (expr (ELEMENT_OPTIONS (= tokenIndex 318) (= p 10)))) (ALT ({self.precpred(self._ctx, 8)}? (ELEMENT_OPTIONS (= p 8))) ('=' (ELEMENT_OPTIONS (= tokenIndex 324))) (expr (ELEMENT_OPTIONS (= tokenIndex 326) (= p 9)))) (ALT ({self.precpred(self._ctx, 24)}? (ELEMENT_OPTIONS (= p 24))) (? (BLOCK (ALT ('@' (ELEMENT_OPTIONS (= tokenIndex 117))) (TYPE (ELEMENT_OPTIONS (= tokenIndex 118)))))) ('.' (ELEMENT_OPTIONS (= tokenIndex 121))) (ID (ELEMENT_OPTIONS (= tokenIndex 122))) ('(' (ELEMENT_OPTIONS (= tokenIndex 123))) (? (BLOCK (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 125))) (* (BLOCK (ALT (',' (ELEMENT_OPTIONS (= tokenIndex 128))) (expr (ELEMENT_OPTIONS (= tokenIndex 129))))))))) (')' (ELEMENT_OPTIONS (= tokenIndex 134)))))))))
2022-06-10 20:01:17:013 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, ID=39, TYPE=40, STRING=41, INTEGER=42, WS=43, LINE_COMMENT=44, COMMENT=45}
2022-06-10 20:01:17:013 semantics LogManager.java:25 strings={';'=1, 'class'=2, 'inherits'=3, '{'=4, '}'=5, '('=6, ','=7, ')'=8, ':'=9, '<-'=10, '@'=11, '.'=12, 'if'=13, 'then'=14, 'else'=15, 'fi'=16, 'while'=17, 'loop'=18, 'pool'=19, 'let'=20, 'in'=21, 'case'=22, 'of'=23, '=>'=24, 'esac'=25, 'new'=26, 'isvoid'=27, '+'=28, '-'=29, '*'=30, '/'=31, '~'=32, '<'=33, '<='=34, '='=35, 'not'=36, 'true'=37, 'false'=38}
2022-06-10 20:01:17:025 LL1 LogManager.java:25 
DECISION 0 in rule prog
2022-06-10 20:01:17:025 LL1 LogManager.java:25 look=[2, <EOF>]
2022-06-10 20:01:17:025 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:025 LL1 LogManager.java:25 
DECISION 1 in rule class
2022-06-10 20:01:17:026 LL1 LogManager.java:25 look=[3, 4]
2022-06-10 20:01:17:026 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:026 LL1 LogManager.java:25 
DECISION 2 in rule class
2022-06-10 20:01:17:026 LL1 LogManager.java:25 look=[39, 5]
2022-06-10 20:01:17:026 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:026 LL1 LogManager.java:25 
DECISION 3 in rule feature
2022-06-10 20:01:17:026 LL1 LogManager.java:25 look=[7, 8]
2022-06-10 20:01:17:026 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:026 LL1 LogManager.java:25 
DECISION 4 in rule feature
2022-06-10 20:01:17:026 LL1 LogManager.java:25 look=[39, 8]
2022-06-10 20:01:17:026 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:026 LL1 LogManager.java:25 
DECISION 5 in rule feature
2022-06-10 20:01:17:026 LL1 LogManager.java:25 look=[10, 1]
2022-06-10 20:01:17:026 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:027 LL1 LogManager.java:25 
DECISION 6 in rule feature
2022-06-10 20:01:17:027 LL1 LogManager.java:25 look=[39, 39]
2022-06-10 20:01:17:027 LL1 LogManager.java:25 LL(1)? false
2022-06-10 20:01:17:027 LL1 LogManager.java:25 
DECISION 7 in rule expr
2022-06-10 20:01:17:027 LL1 LogManager.java:25 look=[7, 8]
2022-06-10 20:01:17:027 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:027 LL1 LogManager.java:25 
DECISION 8 in rule expr
2022-06-10 20:01:17:027 LL1 LogManager.java:25 look=[{4, 6, 13, 17, 20, 22, 26..27, 32, 36..39, 41..42}, 8]
2022-06-10 20:01:17:027 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:027 LL1 LogManager.java:25 
DECISION 9 in rule expr
2022-06-10 20:01:17:028 LL1 LogManager.java:25 look=[{4, 6, 13, 17, 20, 22, 26..27, 32, 36..39, 41..42}, 5]
2022-06-10 20:01:17:028 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:028 LL1 LogManager.java:25 
DECISION 10 in rule expr
2022-06-10 20:01:17:028 LL1 LogManager.java:25 look=[10, {7, 21}]
2022-06-10 20:01:17:028 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:028 LL1 LogManager.java:25 
DECISION 11 in rule expr
2022-06-10 20:01:17:028 LL1 LogManager.java:25 look=[10, {7, 21}]
2022-06-10 20:01:17:028 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:028 LL1 LogManager.java:25 
DECISION 12 in rule expr
2022-06-10 20:01:17:028 LL1 LogManager.java:25 look=[7, 21]
2022-06-10 20:01:17:028 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:028 LL1 LogManager.java:25 
DECISION 13 in rule expr
2022-06-10 20:01:17:028 LL1 LogManager.java:25 look=[39, 25]
2022-06-10 20:01:17:029 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:029 LL1 LogManager.java:25 
DECISION 14 in rule expr
2022-06-10 20:01:17:029 LL1 LogManager.java:25 look=[39, 39, 13, 17, 4, 20, 22, 26, 27, 32, 36, 6, 39, 42, 41, 37, 38]
2022-06-10 20:01:17:029 LL1 LogManager.java:25 LL(1)? false
2022-06-10 20:01:17:029 LL1 LogManager.java:25 
DECISION 15 in rule expr
2022-06-10 20:01:17:029 LL1 LogManager.java:25 look=[11, 12]
2022-06-10 20:01:17:029 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:029 LL1 LogManager.java:25 
DECISION 16 in rule expr
2022-06-10 20:01:17:029 LL1 LogManager.java:25 look=[7, 8]
2022-06-10 20:01:17:029 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:029 LL1 LogManager.java:25 
DECISION 17 in rule expr
2022-06-10 20:01:17:029 LL1 LogManager.java:25 look=[{4, 6, 13, 17, 20, 22, 26..27, 32, 36..39, 41..42}, 8]
2022-06-10 20:01:17:029 LL1 LogManager.java:25 LL(1)? true
2022-06-10 20:01:17:029 LL1 LogManager.java:25 
DECISION 18 in rule expr
2022-06-10 20:01:17:029 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2022-06-10 20:01:17:030 LL1 LogManager.java:25 LL(1)? false
2022-06-10 20:01:17:030 LL1 LogManager.java:25 
DECISION 19 in rule expr
2022-06-10 20:01:17:030 LL1 LogManager.java:25 look=[null, null]
2022-06-10 20:01:17:030 LL1 LogManager.java:25 LL(1)? false
2022-06-10 20:01:17:070 action-translator LogManager.java:25 translate 
2022-06-10 20:01:17:074 action-translator LogManager.java:25 translate self.precpred(self._ctx, 15)
2022-06-10 20:01:17:074 action-translator LogManager.java:25 translate self.precpred(self._ctx, 14)
2022-06-10 20:01:17:074 action-translator LogManager.java:25 translate self.precpred(self._ctx, 13)
2022-06-10 20:01:17:075 action-translator LogManager.java:25 translate self.precpred(self._ctx, 12)
2022-06-10 20:01:17:075 action-translator LogManager.java:25 translate self.precpred(self._ctx, 10)
2022-06-10 20:01:17:075 action-translator LogManager.java:25 translate self.precpred(self._ctx, 9)
2022-06-10 20:01:17:075 action-translator LogManager.java:25 translate self.precpred(self._ctx, 8)
2022-06-10 20:01:17:075 action-translator LogManager.java:25 translate self.precpred(self._ctx, 24)
2022-06-10 20:01:17:077 action-translator LogManager.java:25 translate self.precpred(self._ctx, 15)
2022-06-10 20:01:17:077 action-translator LogManager.java:25 translate self.precpred(self._ctx, 14)
2022-06-10 20:01:17:077 action-translator LogManager.java:25 translate self.precpred(self._ctx, 13)
2022-06-10 20:01:17:077 action-translator LogManager.java:25 translate self.precpred(self._ctx, 12)
2022-06-10 20:01:17:077 action-translator LogManager.java:25 translate self.precpred(self._ctx, 10)
2022-06-10 20:01:17:077 action-translator LogManager.java:25 translate self.precpred(self._ctx, 9)
2022-06-10 20:01:17:077 action-translator LogManager.java:25 translate self.precpred(self._ctx, 8)
2022-06-10 20:01:17:077 action-translator LogManager.java:25 translate self.precpred(self._ctx, 24)
